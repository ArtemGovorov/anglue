{"version":3,"sources":["src/component.js"],"names":[],"mappings":"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","file":"src/component.js","sourcesContent":["import angular from 'angular';\nimport Annotation from './annotation';\n\nexport class Component extends Annotation {\n    get controllerCls() {\n        var annotation = this;\n\n        return class controllerCls extends this.targetCls {\n            constructor() {\n                var injected = Array.from(arguments);\n\n                annotation.applyInjectionBindings(this, injected);\n                annotation.applyDecorators(this);\n\n                super(...injected);\n\n                if (this.activate instanceof Function) {\n                    this.activate();\n                }\n            }\n        };\n    }\n\n    get dependencies() {\n        var targetCls = this.targetCls;\n        return [].concat(\n            targetCls.dependencies || [],\n            this.getModuleNames(targetCls.components)\n        );\n    }\n\n    get template() {\n        return this.targetCls.template || null;\n    }\n\n    get bindings() {\n        return this.targetCls.bindings || null;\n    }\n\n    get module() {\n        if (!this._module) {\n            var name = this.name;\n            var template = this.template;\n            var bindings = this.bindings;\n\n            this._module = angular.module(\n                'components.' + name,\n                this.dependencies\n            );\n\n            var directiveConfig = {\n                restrict: 'E',\n                controllerAs: name,\n                bindToController: true,\n                controller: this.getInjectionTokens().concat([\n                    this.controllerCls\n                ])\n            };\n\n            if (template) {\n                if (template.url) {\n                    directiveConfig.templateUrl = template.url;\n                }\n                else if (template.inline) {\n                    directiveConfig.template = template.inline;\n                }\n            }\n\n            if (bindings) {\n                let scope = directiveConfig.scope = {};\n                for (let binding of Object.keys(bindings)) {\n                    let attr = bindings[binding];\n                    scope[binding] = `=${attr}`;\n                }\n            }\n\n            this._module.directive(name, () => {\n                return directiveConfig;\n            });\n\n            this.configure(this._module);\n        }\n\n        return this._module;\n    }\n}\n\nexport default Component;\n"]}