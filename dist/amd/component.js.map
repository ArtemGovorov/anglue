{"version":3,"sources":["src/component.js"],"names":[],"mappings":"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","file":"src/component.js","sourcesContent":["import angular from 'angular';\nimport Annotation from './annotation';\n\nexport class Component extends Annotation {\n    get controllerCls() {\n        var annotation = this;\n        var TargetCls = this.targetCls;\n\n        class ControllerCls extends TargetCls {\n            constructor($scope, LuxyFlux, LuxyFluxStore, ApplicationDispatcher) {\n                var injected = Array.from(arguments).slice(4);\n                var componentStores = annotation.componentStores;\n\n                super(...injected);\n\n                Object.keys(componentStores).forEach((injectionName) => {\n                    this[injectionName] = new componentStores[injectionName]();\n                });\n\n                annotation.applyInjectionBindings(this, injected);\n                annotation.applyDecorators(this);\n\n                $scope.$on('$destroy', () => {\n                    if (this.onDestroy instanceof Function) {\n                        this.onDestroy.call(this);\n                    }\n\n                    Object.keys(componentStores).forEach((injectionName) => {\n                        this[injectionName].dispatcher = null;\n                        this[injectionName] = null;\n                    });\n                });\n\n\n                if (this.activate instanceof Function) {\n                    this.activate();\n                }\n            }\n\n            fireComponentEvent(event, locals) {\n                if (this._event_handlers && this._event_handlers[event]) {\n                    this._event_handlers[event].call(this, locals);\n                }\n            }\n        }\n\n        return ControllerCls;\n    }\n\n    getInjectionTokens() {\n        return [\n            '$scope',\n            'LuxyFlux',\n            'LuxyFluxStore',\n            'ApplicationDispatcher'\n        ].concat(super.getInjectionTokens());\n    }\n\n    getComponentStoreClasses() {\n        var componentStores = this.componentStores;\n        var classes = [];\n\n        Object.keys(componentStores).forEach((injectionName) => {\n            let storeClass = componentStores[injectionName];\n            if (classes.indexOf(storeClass) === -1) {\n                classes.push(storeClass);\n            }\n        });\n        return classes;\n    }\n\n    get dependencies() {\n        var targetCls = this.targetCls;\n        return [].concat(\n            targetCls.dependencies || [],\n            Annotation.getModuleNames(targetCls.components),\n            Annotation.getModuleNames(this.getComponentStoreClasses())\n        );\n    }\n\n    get template() {\n        return this.targetCls.template || null;\n    }\n\n    get bindings() {\n        return this.targetCls.bindings || null;\n    }\n\n    get events() {\n        return this.targetCls.events || null;\n    }\n\n    get componentStores() {\n        return this.targetCls.componentStores || {};\n    }\n\n    get module() {\n        if (!this._module) {\n            var name = this.name;\n            var template = this.template;\n            var bindings = this.bindings;\n            var events = this.events;\n\n            this._module = angular.module(\n                'components.' + name,\n                this.dependencies\n            );\n\n            var directiveConfig = {\n                restrict: 'EA',\n                controllerAs: name,\n                bindToController: true,\n                scope: true,\n                controller: this.getInjectionTokens().concat([\n                    this.controllerCls\n                ])\n            };\n\n            if (template) {\n                if (template.url) {\n                    directiveConfig.templateUrl = template.url;\n                } else if (template.inline) {\n                    directiveConfig.template = template.inline;\n                }\n                if (template.replace) {\n                    directiveConfig.replace = true;\n                }\n            }\n\n            if (bindings) {\n                let scope = directiveConfig.scope = {};\n                for (let binding of Object.keys(bindings)) {\n                    let attr = bindings[binding];\n                    scope[binding] = `=${attr}`;\n                }\n            }\n\n            if (events) {\n                directiveConfig.link = (scope, el, attr, ctrl) => {\n                    var eventHandlers = ctrl._event_handlers = {};\n                    Object.keys(events).forEach((event) => {\n                        if (attr[event]) {\n                            eventHandlers[events[event]] = (locals) => {\n                                scope.$parent.$eval(attr[event], locals);\n                            };\n                        }\n                    });\n                };\n            }\n\n            this._module.directive(name, () => {\n                return directiveConfig;\n            });\n\n            this.configure(this._module);\n        }\n\n        return this._module;\n    }\n}\n\nexport default Component;\n"]}