{"version":3,"sources":["../../src/actions.js"],"names":[],"mappings":"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","file":"actions.js","sourcesContent":["import angular from 'angular';\n\nimport {Annotation} from './annotation';\nimport {Annotations} from './annotations';\n\nimport {addStaticGetterObjectMember, addStaticGetter} from './utils';\n\n\nexport class ActionsAnnotation extends Annotation {\n  get serviceName() {\n    let name = this.name;\n    return name[0].toUpperCase() + name.slice(1) + 'Actions';\n  }\n\n  getInjectionTokens() {\n    return [\n      'LuxyFlux',\n      'LuxyFluxActionCreators',\n      'ApplicationDispatcher'\n    ].concat(super.getInjectionTokens());\n  }\n\n  get factoryFn() {\n    let TargetCls = this.targetCls;\n    let annotation = this;\n\n    return function(LuxyFlux, LuxyFluxActionCreators, ApplicationDispatcher) {\n      let injected = Array.from(arguments).slice(3);\n      let instance = new TargetCls(...injected);\n\n      annotation.applyInjectionBindings(instance, injected);\n      annotation.applyDecorators(instance);\n\n      return LuxyFlux.createActions({\n        dispatcher: ApplicationDispatcher,\n        serviceActions: TargetCls.serviceActions,\n        decorate: instance\n      }, LuxyFluxActionCreators);\n    };\n  }\n\n  get module() {\n    if (!this._module) {\n      this._module = angular.module(\n        'actions.' + this.name,\n        this.dependencies\n      );\n\n      this._module.factory(\n        this.serviceName,\n        this.getInjectionTokens().concat([this.factoryFn])\n      );\n\n      this.configure(this._module);\n    }\n    return this._module;\n  }\n}\n\n// Decorators\nexport function Actions(config) {\n  return (cls) => {\n    let actionsName;\n    let isConfigObject = angular.isObject(config);\n\n    if (isConfigObject && config.name) {\n      actionsName = config.name;\n    } else if (angular.isString(config)) {\n      actionsName = config;\n    } else {\n      let clsName = cls.name.replace(/actions$/i, '');\n      actionsName = `${clsName[0].toLowerCase()}${clsName.slice(1)}`;\n    }\n\n    let namespace = isConfigObject && config.namespace !== undefined\n      ? config.namespace\n      : actionsName;\n\n    cls.actionNamespace = angular.isString(namespace) && namespace.length\n      ? namespace\n        .replace(/([A-Z])/g, '_$1')\n        .toUpperCase()\n      : null;\n\n    addStaticGetter(cls, 'annotation', () => Annotations.getActions(actionsName, cls));\n  };\n}\n\nexport function AsyncAction(actionName) {\n  return (cls, methodName) => {\n    addStaticGetterObjectMember(cls.constructor, 'serviceActions',\n      () => prepareActionName(cls, actionName, methodName), methodName);\n  };\n}\n\nexport function Action(actionName) {\n  return (cls, methodName, descriptor) => {\n    let originalMethod = descriptor.value;\n    descriptor.value = function(...payload) {\n      let action = prepareActionName(cls, actionName, methodName);\n      let originalReturn = originalMethod.apply(this, payload);\n      let dispatchPromise = this.dispatch(action, ...payload);\n      return angular.isDefined(originalReturn) ? originalReturn : dispatchPromise;\n    };\n  };\n}\n\nexport default ActionsAnnotation;\n\nfunction prepareActionName(cls, actionName, methodName) {\n  let preparedActionName = actionName;\n  if (!preparedActionName) {\n    preparedActionName = methodName.replace(/([A-Z])/g, '_$1');\n  }\n  let actionNamespace = cls.constructor.actionNamespace;\n  if (actionNamespace) {\n    preparedActionName = `${actionNamespace}_${preparedActionName}`;\n  }\n  return preparedActionName.toUpperCase();\n}\n"]}