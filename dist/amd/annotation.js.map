{"version":3,"sources":["../../src/annotation.js"],"names":[],"mappings":"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","file":"annotation.js","sourcesContent":["export class Annotation {\n  constructor(name, targetCls) {\n    this.name = name;\n    this.targetCls = targetCls;\n\n    // We allow the decorators to decorate the targetCls\n    // before we create and configure the module\n    this.applyClassDecorators(targetCls);\n  }\n\n  getInjectionTokens() {\n    var tokens = [];\n    var injections = this.injections;\n    Object.keys(injections).forEach((binding) => {\n      tokens.push(injections[binding]);\n    });\n    return tokens;\n  }\n\n  get injections() {\n    return this.targetCls.injections || {};\n  }\n\n  get decorators() {\n    return this.targetCls.decorators || [];\n  }\n\n  get dependencies() {\n    return this.targetCls.dependencies || [];\n  }\n\n  /**\n   * This method can be overridden by child classes to\n   * configure the angular module after it is created\n   * @param {module} module The created angular module\n   * @returns {undefined}\n   */\n  configure(/*module*/) {}\n\n  /**\n   * This method applies all the requested injection bindings\n   * from the targetCls to the created instance\n   * @param  {Object} instance The created instance that\n   * wants the bindings\n   * @param  {Array} injected An array with the injected\n   * instances that we will apply on the class instance\n   * @returns {undefined}\n   */\n  applyInjectionBindings(instance, injected) {\n    var injections = this.injections;\n\n    Object.keys(injections).forEach((binding, index) => {\n      Object.defineProperty(instance, binding, {value: injected[index]});\n    });\n\n    Object.defineProperty(instance, '_annotation', {value: this});\n  }\n\n  /**\n   * This method decorates the created instance with all the\n   * targetCls decorators\n   * @deprecated\n   * @param  {Object} instance The created instance to be decorated\n   * @returns {undefined}\n   */\n  applyDecorators(instance) {\n    var decorators = this.decorators;\n    for (let decorator of decorators) {\n      if (decorator.decorate instanceof Function) {\n        decorator.decorate(instance);\n      }\n    }\n  }\n\n  /**\n   * This method decorates the class with all the targetCls decorators\n   * @deprecated\n   * @param  {Object} targetCls The targetCls to be decorated\n   * @returns {undefined}\n   */\n  applyClassDecorators(targetCls) {\n    var decorators = this.decorators;\n    for (let decorator of decorators) {\n      if (decorator.decorateClass instanceof Function) {\n        decorator.decorateClass(targetCls);\n      }\n    }\n  }\n\n  /**\n   * Returns all the angular module names for an array of classes\n   * @param  {Array} classes An array of classes you want to module names for\n   * @return {Array} The name of the angular modules for these classes\n   */\n  static getModuleNames(classes = []) {\n    var names = [];\n    for (let cls of classes) {\n      let annotation = cls.annotation;\n      if (annotation) {\n        names.push(annotation.module.name);\n      }\n    }\n    return names;\n  }\n\n  static getAnnotationServiceNames(classes = []) {\n    var names = [];\n    for (let cls of classes) {\n      let annotation = cls.annotation;\n      if (annotation) {\n        names.push(annotation.serviceName);\n      }\n    }\n    return names;\n  }\n}\nexport default Annotation;\n"]}